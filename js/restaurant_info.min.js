let restaurant;var newMap;document.addEventListener("DOMContentLoaded",async event=>{registerServiceWorker(),initMap(),fetchReviewsFromURL()}),registerServiceWorker=(()=>{console.log("in register funcction"),navigator.serviceWorker&&navigator.serviceWorker.register("sw.js").then(reg=>{console.log("registration done"),reg&&"sync"in reg&&registerAddNewReviewSync(reg)}).catch(error=>console.log(error))}),registerAddNewReviewSync=(serviceWorker=>{const reviewForm=document.getElementById("reviewForm"),nameField=document.getElementById("reviewer"),commentField=document.getElementById("comment"),ratingField=document.getElementById("rating");reviewForm.addEventListener("submit",function(event){event.preventDefault();const modal=document.getElementById("myModal"),newReview={restaurant_id:getParameterByName("id"),name:nameField.value,comments:commentField.value,rating:ratingField.value};restaurantStore.saveRecords("unSavedReviews",newReview).then(()=>(commentField.value="",nameField.value="",ratingField.value="",modal.style.display="none",serviceWorker.sync.register("add-new-review"))).then(()=>{displayNewReview(newReview)}).catch(function(err){console.error(err)})})}),initMap=(()=>{fetchRestaurantFromURL().then(restaurant=>{self.newMap=L.map("map",{center:[restaurant.latlng.lat,restaurant.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:constants.mapboxToken,maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap)}).catch(error=>console.error(error))}),fetchRestaurantFromURL=(async()=>{try{if(self.restaurant)return self.restaurant;const id=getParameterByName("id");if(!id)throw"No restaurant id in URL";const restaurant=await DBHelper.fetchRestaurantById(id);return self.restaurant=restaurant,fillRestaurantHTML(),restaurant}catch(error){console.error(error)}}),fetchReviewsFromURL=(async()=>{try{const id=getParameterByName("id");if(!id)throw"No restaurant id in URL";const reviews=await DBHelper.fetchReviewsByRestaurant(id);fillReviewsHTML(reviews)}catch(error){console.error(error)}}),fillRestaurantHTML=((restaurant=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=restaurant.name,document.getElementById("restaurant-address").innerHTML=restaurant.address;const image=document.getElementById("restaurant-img");image.alt=restaurant.name,image.className="restaurant-img";const{sourceSet:sourceSet,src:src}=getImageSourceSetAndSrc(restaurant);image.srcset=sourceSet,image.src=src;const cuisine=document.getElementById("restaurant-cuisine");cuisine.innerHTML=restaurant.cuisine_type,console.log("is_favorite",restaurant.is_favorite);const favoriteToggle=fillFavoriteToggleControl(restaurant.is_favorite);cuisine.appendChild(favoriteToggle),restaurant.operating_hours&&fillRestaurantHoursHTML()}),fillFavoriteToggleControl=(isFavorite=>{const span=document.createElement("span");span.setAttribute("id","favoriteState");const input=document.createElement("input");input.setAttribute("type","checkbox"),input.setAttribute("id","favorite-toggle"),null!=isFavorite?(input.checked=isFavorite,input.value=isFavorite):(input.checked=!1,input.value=!1),input.onclick=toggleFavoriteState;const label=document.createElement("label");return label.innerHTML="&#x2665",label.setAttribute("id","favorite-toggle-label"),label.setAttribute("for","favorite-toggle"),"true"==isFavorite?label.classList.add("checked"):label.classList.remove("checked"),span.appendChild(input),span.appendChild(label),span}),getImageSourceSetAndSrc=(restaurant=>{let image=restaurant.photograph;return{sourceSet:`images/${image}-270_medium.jpg , images/${image}-540_large.jpg 2x`,src:`images/${image}-540_large.jpg`}}),fillRestaurantHoursHTML=((operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById("restaurant-hours");for(let key in operatingHours){const row=document.createElement("tr"),day=document.createElement("td");day.innerHTML=key,row.appendChild(day);const time=document.createElement("td");time.innerHTML=operatingHours[key],row.appendChild(time),hours.appendChild(row)}}),fillReviewsHTML=(reviews=>{const container=document.getElementById("reviews-container");if(!reviews){const noReviews=document.createElement("p");return noReviews.innerHTML="No reviews yet!",void container.appendChild(noReviews)}const div=document.getElementById("reviews-list");reviews.forEach(review=>{div.appendChild(createReviewHTML(review))}),container.appendChild(div)}),createReviewHTML=(review=>{const article=document.createElement("article"),name=document.createElement("p");name.innerHTML=review.name,article.appendChild(name);const date=document.createElement("p");date.innerHTML=review.date,article.appendChild(date);const rating=document.createElement("p");rating.innerHTML=`Rating: ${review.rating}`,article.appendChild(rating);const comments=document.createElement("p");return comments.innerHTML=review.comments,article.appendChild(comments),article}),fillBreadcrumb=((restaurant=self.restaurant)=>{const breadcrumb=document.getElementById("breadcrumb"),li=document.createElement("li");li.innerHTML=restaurant.name,breadcrumb.appendChild(li)}),getParameterByName=((name,url)=>{url||(url=window.location.href),name=name.replace(/[\[\]]/g,"\\$&");const results=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`).exec(url);return results?results[2]?decodeURIComponent(results[2].replace(/\+/g," ")):"":null}),displayNewReview=(newReview=>{const firstReview=document.querySelector("#reviews-list article"),parentDiv=firstReview.parentNode,newReviewHTML=createReviewHTML(newReview);parentDiv.insertBefore(newReviewHTML,firstReview)}),toggleFavoriteState=(()=>{const favoriteToggle=document.getElementById("favorite-toggle"),favoriteToggleLabel=document.getElementById("favorite-toggle-label"),isFavorite=favoriteToggle.checked,restaurantId=getParameterByName("id");DBHelper.updateFavoriteState(restaurantId,isFavorite).then(()=>{favoriteToggle.value=isFavorite,1==isFavorite?favoriteToggleLabel.classList.add("checked"):favoriteToggleLabel.classList.remove("checked")}).catch(error=>console.error(error))});
//# sourceMappingURL=../path/to/sourcemap.map