class DBHelper{static get SERVER_URL(){return"http://localhost:1337"}static async fetchRestaurants(){try{const response=await fetch(`${DBHelper.SERVER_URL}/restaurants/`);return await response.json()}catch(error){return`Request failed. Returned status of ${error.status}`}}static async updateFavoriteState(restaurantId,isFavorite){try{const url=`${DBHelper.SERVER_URL}/restaurants/${restaurantId}/?is_favorite=${isFavorite}`,response=await fetch(url,{method:"PUT"});return await response.json()}catch(error){return`Request failed. Returned status of ${error.status}`}}static async fetchReviewsByRestaurant(restaurantId){try{const response=await fetch(`${DBHelper.SERVER_URL}/reviews/?restaurant_id=${restaurantId}`);return await response.json()}catch(error){return`Request failed. Returned status of ${error.status}`}}static async fetchRestaurantById(id){try{return(await DBHelper.fetchRestaurants()).find(r=>r.id==id)}catch(error){return"Restaurant does not exist"}}static async fetchRestaurantByCuisine(cuisine){try{return(await DBHelper.fetchRestaurants()).filter(r=>r.cuisine_type==cuisine)}catch(error){return error}}static async fetchRestaurantByNeighborhood(neighborhood){try{return(await DBHelper.fetchRestaurants()).filter(r=>r.neighborhood==neighborhood)}catch(error){return error}}static async fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood){try{let results=await DBHelper.fetchRestaurants();return"all"!=cuisine&&(results=results.filter(r=>r.cuisine_type==cuisine)),"all"!=neighborhood&&(results=results.filter(r=>r.neighborhood==neighborhood)),results}catch(error){return error}}static async fetchNeighborhoods(callback){try{const restaurants=await DBHelper.fetchRestaurants(),neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);return neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)}catch(error){return error}}static async fetchCuisines(callback){try{const restaurants=await DBHelper.fetchRestaurants(),cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);return cuisines.filter((v,i)=>cuisines.indexOf(v)==i)}catch(error){return error}}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){return`/img/${restaurant.photograph}`}static mapMarkerForRestaurant(restaurant,map){const marker=new L.marker([restaurant.latlng.lat,restaurant.latlng.lng],{title:restaurant.name,alt:restaurant.name,url:DBHelper.urlForRestaurant(restaurant)});return marker.addTo(newMap),marker}}
//# sourceMappingURL=../path/to/sourcemap.map